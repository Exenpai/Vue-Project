{"remainingRequest":"C:\\Users\\832223\\Documents\\Semester 4\\Emerging Trends in Technology\\Vue Project\\new_project\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\832223\\Documents\\Semester 4\\Emerging Trends in Technology\\Vue Project\\new_project\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\832223\\Documents\\Semester 4\\Emerging Trends in Technology\\Vue Project\\new_project\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\832223\\Documents\\Semester 4\\Emerging Trends in Technology\\Vue Project\\new_project\\src\\components\\PizzaComponent.vue?vue&type=template&id=062055f6&","dependencies":[{"path":"C:\\Users\\832223\\Documents\\Semester 4\\Emerging Trends in Technology\\Vue Project\\new_project\\src\\components\\PizzaComponent.vue","mtime":1618114254899},{"path":"C:\\Users\\832223\\Documents\\Semester 4\\Emerging Trends in Technology\\Vue Project\\new_project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\832223\\Documents\\Semester 4\\Emerging Trends in Technology\\Vue Project\\new_project\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\832223\\Documents\\Semester 4\\Emerging Trends in Technology\\Vue Project\\new_project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\832223\\Documents\\Semester 4\\Emerging Trends in Technology\\Vue Project\\new_project\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF92bS5fbSgwKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgWwogICAgICBfYygiZmllbGRzZXQiLCBbCiAgICAgICAgX2MoImxlZ2VuZCIsIFtfYygiaDIiLCBbX3ZtLl92KCJQaXp6YSBDaG9pY2VzIildKV0pLAogICAgICAgIF9jKCJ0YWJsZSIsIFsKICAgICAgICAgIF9jKCJ0YWJsZSIsIFsKICAgICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljQ2xhc3M6ICIgY2VudGVyIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZmlndXJlIiwgWwogICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL2ltYWdlcy5jb250ZW50c3RhY2suaW8vdjMvYXNzZXRzL2JsdDA2OGRiYzU0YmY0ZmM3ZWQvYmx0ZjcwZGYwYTNmN2I5OGQwNC81ZGI1YzgyOWU5ZWZmYTZiYTUyOTcyZWEvVHJpcGxlX0NoZWVzZV9QaXp6YV92Mi5qcGciLAogICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiIDc1cHgiLAogICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICI3NXB4IiwKICAgICAgICAgICAgICAgICAgICAgIGFsdDogIlBpY3R1cmUgb2YgY2hlZXNlIHBpenphIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJmaWdjYXB0aW9uIiwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJyYWRpbyIsCiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJwaXp6YXR5cGUiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIlN1cGVyIENoZWVzeSIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlN1cGVyIENoZWVzeSAiKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY0NsYXNzOiAiY2VudGVyIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZmlndXJlIiwgWwogICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL3d3dy5xdWVlbnNsZWVhcHBldGl0LmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAxOS8wMi9NZWF0LUxvdmVycy1QaXp6YS02LmpwZyIsCiAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICI3NXB4IiwKICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAiNzVweCIsCiAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICJQaWN0dXJlIG9mIGV4dHJhIG1lYXR5IHBpenphIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJmaWdjYXB0aW9uIiwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJyYWRpbyIsCiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJwaXp6YXR5cGUiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIkV4dHJhIE1lYXR5IgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigiRXh0cmEgTWVhdHkgIikKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNDbGFzczogImNlbnRlciIgfSwgWwogICAgICAgICAgICAgICAgX2MoImZpZ3VyZSIsIFsKICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgc3JjOiAiaHR0cHM6Ly91c2VyY29udGVudDIuaHVic3RhdGljLmNvbS8xNDY4NTU4NS5qcGciLAogICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiIDc1cHgiLAogICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICI3NXB4IiwKICAgICAgICAgICAgICAgICAgICAgIGFsdDogIlBpY3R1cmUgb2YgY2hlZXNlIHBpenphIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJmaWdjYXB0aW9uIiwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJyYWRpbyIsCiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJwaXp6YXR5cGUiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIlJlYWxseSBWZWdneSIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlJlYWxseSBWZWdneSAiKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygidGFibGUiLCBbCiAgICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogInJhZGlvIiwKICAgICAgICAgICAgICAgICAgICBuYW1lOiAicGl6emFzaXplIiwKICAgICAgICAgICAgICAgICAgICBpZDogIlNtYWxsIiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIjguNTAiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCJTbWFsbCAkOC41MCAiKSwKICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAicmFkaW8iLAogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJwaXp6YXNpemUiLAogICAgICAgICAgICAgICAgICAgIGlkOiAiTWVkaXVtIiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIjExLjUwIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF92bS5fdigiTWVkaXVtICQxMS41MCAiKSwKICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAicmFkaW8iLAogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJwaXp6YXNpemUiLAogICAgICAgICAgICAgICAgICAgIGlkOiAiTGFyZ2UiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiMTQuMDAiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCJMYXJnZSAkMTQuMDAgIiksCiAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogInJhZGlvIiwKICAgICAgICAgICAgICAgICAgICBuYW1lOiAicGl6emFzaXplIiwKICAgICAgICAgICAgICAgICAgICBpZDogIkV4dHJhIExhcmdlIiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIjE2LjUwIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF92bS5fdigiRXh0cmEgTGFyZ2UgJDE2LjUwICIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgICBfYygibGFiZWwiLCB7IGF0dHJzOiB7IGZvcjogInBpenphcXVhbnRpdHkiIH0gfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIlF1YW50aXR5OiIpCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAibnVtYmVyIiwKICAgICAgICAgICAgICAgICAgICBuYW1lOiAicGl6emFxdWFudGl0eSIsCiAgICAgICAgICAgICAgICAgICAgaWQ6ICJwaXp6YXF1YW50aXR5IiwKICAgICAgICAgICAgICAgICAgICBtaW46ICIwIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgICAgX2MoImxhYmVsIiwgeyBhdHRyczogeyBmb3I6ICJwaXp6YXRvcHBpbmdzIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJFeHRyYSB0b3BwaW5ncyAkMS43NSBlYWNoOiIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJjaGVja2JveCIsCiAgICAgICAgICAgICAgICAgICAgbmFtZTogIkV4dHJhY2hlZXNlIiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIjEuNzUiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCJFeHRyYSBDaGVlc2UgIiksCiAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJjaGVja2JveCIsIG5hbWU6ICJQZXBwZXJvbmkiLCB2YWx1ZTogIjEuNzUiIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCJQZXBwZXJvbmkgIiksCiAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJjaGVja2JveCIsIG5hbWU6ICJNdXNocm9vbXMiLCB2YWx1ZTogIjEuNzUiIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCJNdXNocm9vbXMgIiksCiAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJjaGVja2JveCIsIG5hbWU6ICJCYWNvbiIsIHZhbHVlOiAiMS43NSIgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIkJhY29uICIpLAogICAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAiY2hlY2tib3giLCBuYW1lOiAiT2xpdmVzIiwgdmFsdWU6ICIxLjc1IiB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF92bS5fdigiT2xpdmVzICIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}